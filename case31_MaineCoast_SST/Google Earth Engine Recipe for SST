/*
Author: Luiz Felipe Machado Faria de Souza
Co-Author : Lino Augusto Sander de Carvalho

This code is free to use. 

By using this code and any data derived with it, 
you agree to cite the following reference 
in any publications derived from them:

"Recipes for the derivation of water quality parameters using the high spatial 
resolution data from sensors on board Sentinel-2A, 2B and Landsat-5,7,8,9 satellites"

*/

////////// Defining Geometry for Damariscotta River - Maine - USA //////////

var coord = ee.Geometry.Point([-69.54253,43.99818])


////////// Defining Water Masking Functions //////////

// Land mask function for Landsat 5 and 7

function mask_Water57(image){
  var ndwi = image.expression(       // Normalized Difference Water Index (NDWI) used for masking water bodies.
    '(green - nir) / (green + nir)', // Defining  NDWI mathematical expression
    {
        green: image.select('SR_B2'),   // Selecting Landsat 5 and 7 Bands for NDWI (Band 2)
        nir: image.select('SR_B4'),     // Selecting Landsat 5 and 7 Bands for NDWI (Band 4)
    });
  return image.updateMask(ndwi.gt(0.1))   // Selecting NDWI values over 0.1
  .copyProperties(image, ["system:time_start"])
}

// Land mask function for Landsat 8

function mask_Water8(image){
  var ndwi = image.expression(         // Normalized Difference Water Index (NDWI) used for masking water bodies.
    '(green - nir) / (green + nir)',   // Defining  NDWI mathematical expression
    {
        green: image.select('SR_B3'),   // Selecting Landsat 8 Bands for NDWI (Band 3)
        nir: image.select('SR_B5'),     // Selecting Landsat 8 Bands for NDWI (Band 5)
    });
  return image.updateMask(ndwi.gt(0.1)) // Selecting NDWI values over 0.1
  .copyProperties(image, ["system:time_start"])
}

////////// Defining function to scale the data and mask unwanted pixels for Landsat 5 and 7 //////////

function maskL457sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);  // Apply the scaling factors for optical bands
  var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0).subtract(273.15); // Apply the scaling factors for Thermal band
  return image.addBands(opticalBands, null, true) // Replace the original bands with the scaled ones and apply mask
      .addBands(thermalBand, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask)}

////////// Defining function to scale the data and mask unwanted pixels for Landsat 8 //////////

function maskL8sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2); // Apply the scaling factors for optical bands
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0).subtract(273.15); // Apply the scaling factors for Thermal bands
  return image.addBands(opticalBands, null, true) // Replace the original bands with the scaled ones and apply mask
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask)}


//Renaming the landsat 8 thermal band (band 10) to match with names landsat 5 and 7 thermal bands

function rename_band(image) {
  var name = image.expression('thermal_band', {
    'thermal_band': image.select('ST_B10')
    }).rename('ST_B6')
    return name}
    
    
////////// Defining Sampling Windows/Kernels //////////

// Window 3x3
function neighborhood_window_3x3 (image) {
  var window = image.reduceNeighborhood({
    reducer: ee.Reducer.mean(), 
    kernel: ee.Kernel.square(3)
    })
    return window.copyProperties(image, ['system:time_start'])}

// Window 5x5
function neighborhood_window_5x5 (image) {
  var window = image.reduceNeighborhood({
    reducer: ee.Reducer.mean(), 
    kernel: ee.Kernel.square(5)
    })
    return window.copyProperties(image, ['system:time_start'])}
    
    
////////// Defining Landsat Collection Functions //////////
    
//Image Collection from Landsat 5
var L5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2') // USGS Landsat 5 Level 2, Collection 2, Tier 1
           .filterMetadata('CLOUD_COVER', 'less_than', 10) // Removing scenes with cloud cover percentage less than 10%
           .filter(ee.Filter.eq('WRS_PATH', 11)) // Selecting scene Path
           .filter(ee.Filter.eq('WRS_ROW', 29)) // Selecting scene Row
           
//Image Collection from Landsat 7
var L7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2') // USGS Landsat 7 Level 2, Collection 2, Tier 1
           .filterMetadata('CLOUD_COVER', 'less_than', 10) // Removing scenes with cloud cover percentage less than 10%
           .filterDate('1999-05-28', '2003-07-18') //Removing dates where Landsat 7 was not functioning properly
           .filter(ee.Filter.eq('WRS_PATH', 11)) // Selecting scene Path
           .filter(ee.Filter.eq('WRS_ROW', 29)) // Selecting scene Row
           
//Image Collection from Landsat 8
var L8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2') // USGS Landsat 8 Level 2, Collection 2, Tier 1
           .filterMetadata('CLOUD_COVER', 'less_than', 10) // Removing scenes with cloud cover percentage less than 10%
           .filter(ee.Filter.eq('WRS_PATH', 11)) // Selecting scene Path
           .filter(ee.Filter.eq('WRS_ROW', 29)) // Selecting scene Row
           
           
////////// Applying  Functions //////////
           
L5 = L5.map(maskL457sr).select('ST_B6') // Select Thermal band
L7 = L7.map(maskL457sr).select('ST_B6') // Select Thermal band
L8 = L8.map(maskL8sr).map(rename_band) // Rename Thermal band from L8 to equals L5 and L7

// Applying 3x3 window 
var L5_nw3 = L5.map(neighborhood_window_3x3)
var L7_nw3 = L7.map(neighborhood_window_3x3)
var L8_nw3 = L8.map(neighborhood_window_3x3)

// Applying 5x5 window 
var L5_nw5 = L5.map(neighborhood_window_5x5)
var L7_nw5 = L7.map(neighborhood_window_5x5)
var L8_nw5 = L8.map(neighborhood_window_5x5)

// Stacking filtered Landsat 5, 7 and 8 images 
var WST = L5.merge(L7).merge(L8) // 
var WST3 = L5_nw3.merge(L7_nw3).merge(L8_nw3)
var WST5 = L5_nw5.merge(L7_nw5).merge(L8_nw5)


////////// Creating dataframe (featurecollection) for Excel Export ////////// 

// Window 1x1 (One Pixel)
var WST_data = ee.FeatureCollection(WST.map(function(image){
  return ee.Feature(null, image.reduceRegion(ee.Reducer.first(), coord, 30))
             .set('Date', image.date().format('YYYY-MM-dd'))
             .set('Time', image.date().format('HH:mm'))}));

// Window 3x3 (9 Pixels Mean)
var WST3_data = ee.FeatureCollection(WST3.map(function(image){
  return ee.Feature(null, image.reduceRegion(ee.Reducer.first(), coord, 30))
             .set('Date', image.date().format('YYYY-MM-dd'))
             .set('Time', image.date().format('HH:mm'))}));

// Window 5x5
var WST5_data = ee.FeatureCollection(WST5.map(function(image){
  return ee.Feature(null, image.reduceRegion(ee.Reducer.first(), coord, 30))
             .set('Date', image.date().format('YYYY-MM-dd'))
             .set('Time', image.date().format('HH:mm'))}));

// Export Water Temperature Values (1x1 Window Stack) to drive in excel csv format 
Export.table.toDrive({collection: WST_data, 
                      description: 'Water_Surface_Temperature_one_pixel-teste', 
                      fileFormat: 'CSV', 
                      selectors: ['Date', 'Time', 'ST_B6']})

// Export Water Temperature Values (3x3 Window Stack) to drive in excel csv format 
Export.table.toDrive({collection: WST3_data, 
                      description: 'Water_Surface_Temperature_pixel-3x3', 
                      fileFormat: 'CSV', 
                      selectors: ['Date', 'Time', 'ST_B6_mean']})

// Export Water Temperature Values (5x5 Window Stack) to drive in excel csv format 
Export.table.toDrive({collection: WST5_data, 
                      description: 'Water_Surface_Temperature_pixel-5x5', 
                      fileFormat: 'CSV', 
                      selectors: ['Date', 'Time', 'ST_B6_mean']})


////////// Creating Charts/Plots for visualization in Google Earth Engine ////////// 

var chart1 = ui.Chart.image.series(WST.select('ST_B6'), coord).setOptions({title: 'WST'}).setOptions({
          title: 'Water Surface Temperature in Damariscotta River Point',
  hAxis: {title: 'Years'},
  vAxis: {title: 'WST °C'}})
          
var chart2 = ui.Chart.image.series(WST3.select('ST_B6_mean'), coord).setOptions({title: 'WST 3X3'}).setOptions({title: 'WST'}).setOptions({
          title: 'Water Surface Temperature in Damariscotta River Point (Window 3x3)',
  hAxis: {title: 'Years'},
  vAxis: {title: 'WST °C'}})
          
var chart3 = ui.Chart.image.series(WST5.select('ST_B6_mean'), coord).setOptions({title: 'WST 5X5'}).setOptions({title: 'WST'}).setOptions({
          title: 'Water Surface Temperature in Damariscotta River Point (Window 5x5)',
  hAxis: {title: 'Years'},
  vAxis: {title: 'WST °C'}})

print(chart1)
print(chart2)
print(chart3)

